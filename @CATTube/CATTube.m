classdef CATTube < CAT
    
    % GUI for CAT
    %
    %
    
    % Martin Iggland, first version 2013-12-04
    
    properties
        
        % GUI handles and stuff
        gui
        
    end % properties
    
    methods
        
        %% Constructor method
        
        function O = CATTube(varargin)
            
            % Call CAT constructor
            O = O@CAT; % first create an empty object (this will basically draw the GUI). After GUI is finished setting up, we copy the contents of O_original into the GUI
            O_original = CAT( varargin{:} );
            
            % Start constructing GUI
            
            % Initialise the main GUI, define all buttons and graphics
            % objects
            
            %
            % Initialise the GUI
            close all
            % Create the figure handle
            O.gui.fighandle = figure(...
                'MenuBar','none',...
                'Name','Looking at CATs',...
                'NumberTitle','off',...
                'Position',[200 200 1050 445],...
                'Resize','off');
            
            % Create GUI ui controls
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % Initial conditions
            %
            
            % Panel for initial conditions
            O.gui.init.panel = uipanel('Parent',O.gui.fighandle,...
                'Title','Initial settings',...
                'Units','pixels',...
                'Position',[20 300 500 125]);
            
            % Distribution
            % Text
            O.gui.init.init_dist_text = uicontrol(O.gui.init.panel,...
                'Style','text',...
                'String','Initial distribution function',...
                'Position',[10 85 240 20]);
            O.gui.init.init_dist_warning = uicontrol(O.gui.init.panel,...
                'Style','text',...
                'String','!',...
                'visible','off',...
                'Position',[235 85 10 20]);
            % Input box
            O.gui.init.init_dist = uicontrol(O.gui.init.panel,...
                'Style','edit',...
                'Background','w',...
                'Enable','off',... It's not easy to define a distribution by typing, show only summary here
                'String','',...
                'TooltipString','Enter the initial distribution (Distribution class)',...
                'Position',[250 85 140 20]);
            % Define button
            O.gui.init.init_dist_define = uicontrol(O.gui.init.panel,...
                'Style','pushbutton',...
                'String','Edit',...
                'Value',0,...
                'Callback',@(hObject,eventdata)O.editDist(hObject,eventdata),...
                'Position',[390 85 50 20]...
                );
            % Browse button
            O.gui.init.init_dist_browse = uicontrol(O.gui.init.panel,...
                'Style','pushbutton',...
                'String','Browse',...
                'Value',0,...
                'Callback',@(hObject,eventdata)O.browseVars(hObject,eventdata,'init_dist',O.gui.init.init_dist,'Distribution'),...
                'Position',[440 85 50 20]...
                );
            
            % Seed mass
            % Text
            O.gui.init.init_seed_text = uicontrol(O.gui.init.panel,...
                'Style','text',...
                'String','Seed mass [?]',...
                'TooltipString',sprintf('Units must be consistent with those used for\n - Initial Concentration \n - Solubility Function\n - Crystal Density'),...
                'Position',[10 60 240 20]);
            % Warning Sign
            O.gui.init.init_seed_warning = uicontrol(O.gui.init.panel,...
                'Style','text',...
                'String','!',...
                'visible','off',...
                'Position',[235 60 10 20]);
            % Input box
            O.gui.init.init_seed = uicontrol(O.gui.init.panel,...
                'Style','edit',...
                'String',data2str(O.init_seed),...
                'Background','w',...
                'TooltipString','Enter the initial Seed Mass (scalar)',...
                'Callback',@(hObject,eventdata)set(O,'init_seed',str2num(get(hObject,'String'))),...
                'Position',[250 60 190 20]); %#ok<*ST2NM>
            % Browse button
            O.gui.init.init_seed_browse = uicontrol(O.gui.init.panel,...
                'Style','pushbutton',...
                'String','Browse',...
                'Value',0,...
                'Callback',@(hObject,eventdata)O.browseVars(hObject,eventdata,'init_seed',O.gui.init.init_seed,'double'),...
                'Position',[440 60 50 20]...
                );
            
            % Mass medium (solvent + antisolvent?)
            % Text
            O.gui.init.init_massmedium_text = uicontrol(O.gui.init.panel,...
                'Style','text',...
                'String','Total initial Solvent+Antisolvent Mass [?]',...
                'TooltipString',sprintf('Units must be consistent with those used for\n - Initial Concentration \n - Solubility Function\n - Antisolvent profile\n - Nucleation Rate'),...
                'Position',[10 35 240 20]);
            % Warning Sign
            O.gui.init.init_massmedium_warning = uicontrol(O.gui.init.panel,...
                'Style','text',...
                'String','!',...
                'visible','off',...
                'Position',[235 35 10 20]);
            % Input box
            O.gui.init.init_massmedium = uicontrol(O.gui.init.panel,...
                'Style','edit',...
                'String',data2str(get(O,'init_massmedium')),...
                'Background','w',...
                'TooltipString','Enter the initial Solvent+Antisolvent Mass (scalar)',...
                'Callback',@(hObject,eventdata) intervalBoundCallback(hObject,eventdata,'init_massmedium',[0 inf]),...
                'Position',[250 35 190 20]);
            % Browse button
            O.gui.init.init_massmedium_browse = uicontrol(O.gui.init.panel,...
                'Style','pushbutton',...
                'String','Browse',...
                'Value',0,...
                'Callback',@(hObject,eventdata)O.browseVars(hObject,eventdata,'init_massmedium',O.gui.init.init_massmedium,'double'),...
                'Position',[440 35 50 20]...
                );
            
            % c0
            % Text
            O.gui.init.init_conc_text = uicontrol(O.gui.init.panel,...
                'Style','text',...
                'String','Initial concentration [?]',...
                'TooltipString',sprintf('Units must be MASS SOLUTE PER MASS SOLVENT+ANTISOLVENT and consistent with those used for\n - Seed Mass\n - Crystal Density \n - Total initial Solvent+Antisolvent Mass \n - Solubility Function\n - Antisolvent profile\n - Nucleation Rate'),...
                'Position',[10 10 240 20]);
            % Warning Sign
            O.gui.init.init_conc_warning = uicontrol(O.gui.init.panel,...
                'Style','text',...
                'String','!',...
                'visible','off',...
                'Position',[235 10 10 20]);
            % Input box
            O.gui.init.init_conc = uicontrol(O.gui.init.panel,...
                'Style','edit',...
                'String',data2str(O.init_conc),...
                'Background','w',...
                'TooltipString','Enter the initial concentration (scalar or ''sat'' for saturated solution)',...
                'Callback',@concCallback,...
                'Position',[250 10 190 20]);
            % Browse button
            O.gui.init.init_conc_browse = uicontrol(O.gui.init.panel,...
                'Style','pushbutton',...
                'String','Browse',...
                'Value',0,...
                'Callback',@(hObject,eventdata)O.browseVars(hObject,eventdata,'init_conc',O.gui.init.init_conc,'double'),...
                'Position',[440 10 50 20]...
                );
            
            function concCallback(hObject,~)
                if strcmp(get(hObject,'string'),'sat') || isempty(str2num(get(hObject,'String')))
                    set(O,'init_conc',get(hObject,'String'));
                else
                    set(O,'init_conc',str2num(get(hObject,'String')));
                end
                
            end
            
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % Process
            %
            
            % Panel for process settings
            O.gui.proc.panel = uipanel('Parent',O.gui.fighandle,...
                'Title','Process settings',...
                'Units','pixels',...
                'Position',[20 215 500 75]);
            
            % Tprofile
            % Text
            O.gui.proc.Tprofile_text = uicontrol(O.gui.proc.panel,...
                'Style','text',...
                'String','Temperature Profile [?]',...
                'ToolTipString',sprintf('Units must be consistent with those used for\n - Solubility Function\n - Nucleation Rate \n - Growth Rate \n - Solution Time'),...
                'Position',[10 35 240 20]);
            % Warning Sign
            O.gui.proc.Tprofile_warning = uicontrol(O.gui.proc.panel,...
                'Style','text',...
                'String','!',...
                'visible','off',...
                'Position',[235 35 10 20]);
            % Input box
            O.gui.proc.Tprofile = uicontrol(O.gui.proc.panel,...
                'Style','edit',...
                'String',data2str(O.Tprofile),...
                'Background','w',...
                'TooltipString','Enter the temperature profile: temperature as a function of time (an. function; or matrix; or scalar)',...
                'Callback',@(hObject,eventdata)set(O,'Tprofile',get(hObject,'String')),...
                'Position',[250 35 190 20]);
            % Browse button
            O.gui.proc.Tprofile_browse = uicontrol(O.gui.proc.panel,...
                'Style','pushbutton',...
                'String','Browse',...
                'Value',0,...
                'Callback',@(hObject,eventdata)O.browseVars(hObject,eventdata,'Tprofile',O.gui.proc.Tprofile,{'double','function_handle'}),...
                'Position',[440 35 50 20]...
                );
            
            % ASprofile
            % Text
            O.gui.proc.ASprofile_text = uicontrol(O.gui.proc.panel,...
                'Style','text',...
                'String','Antisolvent Profile [?]',...
                'ToolTipString',sprintf('Units must be consistent with those used for\n - Initial Concentration \n - Solubility Function\n - Nucleation Rate \n - Solvent Mass'),...
                'Position',[10 10 240 20]);
            % Warning Sign
            O.gui.proc.ASprofile_warning = uicontrol(O.gui.proc.panel,...
                'Style','text',...
                'String','!',...
                'visible','off',...
                'Position',[235 10 10 20]);
            % Input box
            O.gui.proc.ASprofile = uicontrol(O.gui.proc.panel,...
                'Style','edit',...
                'String',data2str(O.ASprofile),...
                'Background','w',...
                'TooltipString','Enter the antisolvent profile: mass added as a function of time (an. function; or table)',...
                'Callback',@(hObject,eventdata)set(O,'ASprofile',get(hObject,'String')),...
                'Position',[250 10 190 20]);
            % Browse button
            O.gui.proc.ASprofile_browse = uicontrol(O.gui.proc.panel,...
                'Style','pushbutton',...
                'String','Browse',...
                'Value',0,...
                'Callback',@(hObject,eventdata)O.browseVars(hObject,eventdata,'ASprofile',O.gui.proc.ASprofile,{'double','function_handle'}),...
                'Position',[440 10 50 20]...
                );
            
            
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % Thermodynamics
            %
            
            % Panel for thermodynamics settings
            O.gui.td.panel = uipanel('Parent',O.gui.fighandle,...
                'Title','Thermodynamics and substance properties',...
                'Units','pixels',...
                'Position',[20 105 500 100]);
            
            % Solubility
            O.gui.td.solubility_text = uicontrol(O.gui.td.panel,...
                'Style','text',...
                'String','Solubility function [?]',...
                'TooltipString',sprintf('Units must be MASS SOLUTE PER MASS SOLVENT+ANTISOLVENT and consistent with those used for\n - Seed Mass\n - Crystal Density \n - Total initial Solvent+Antisolvent Mass \n - Initial Concentration\n - Antisolvent profile\n - Nucleation Rate'),...
                'Position',[10 60 240 20]);
            % Warning Sign
            O.gui.td.solubility_warning = uicontrol(O.gui.td.panel,...
                'Style','text',...
                'String','!',...
                'visible','off',...
                'Position',[235 60 10 20]);
            % Input box
            O.gui.td.solubility = uicontrol(O.gui.td.panel,...
                'Style','edit',...
                'String',data2str(O.solubility),...
                'Background','w',...
                'TooltipString',sprintf('Enter the solubility function as a function of temperature (T) and antisolvent mass fraction (xm) (an. function; or scalar)'),...
                'Callback',@(hObject,eventdata)set(O,'solubility',get(hObject,'String')),...
                'Position',[250 60 190 20]);
            % Browse button
            O.gui.td.solubility_browse = uicontrol(O.gui.td.panel,...
                'Style','pushbutton',...
                'String','Browse',...
                'Value',0,...
                'Callback',@(hObject,eventdata)O.browseVars(hObject,eventdata,'solubility',O.gui.td.solubility,{'double','function_handle'}),...
                'Position',[440 60 50 20]...
                );
            
            % rhoc
            O.gui.td.rhoc_text = uicontrol(O.gui.td.panel,...
                'Style','text',...
                'String','Crystal density [?]',...
                'ToolTipString',sprintf('Units must be consistent with those used for\n - Seed Mass\n - Initial Concentration \n - Solubility Function\n'),...
                'Position',[10 35 240 20]);
            O.gui.td.rhoc_warning = uicontrol(O.gui.td.panel,...
                'Style','text',...
                'String','!',...
                'visible','off',...
                'Position',[235 35 10 20]);
            
            % Input box
            O.gui.td.rhoc = uicontrol(O.gui.td.panel,...
                'Style','edit',...
                'String',data2str(O.rhoc),...
                'Background','w',...
                'TooltipString','Enter the crystal density (scalar)',...
                'Callback',@(hObject,eventdata)set(O,'rhoc',str2num(get(hObject,'String'))),...
                'Position',[250 35 190 20]);
            % Browse button
            O.gui.td.rhoc_browse = uicontrol(O.gui.td.panel,...
                'Style','pushbutton',...
                'String','Browse',...
                'Value',0,...
                'Callback',@(hObject,eventdata)O.browseVars(hObject,eventdata,'rhoc',O.gui.td.rhoc,'double'),...
                'Position',[440 35 50 20]...
                );
            
            % kv
            O.gui.td.kv_text = uicontrol(O.gui.td.panel,...
                'Style','text',...
                'String','Shape factor [0-1]',...
                'Position',[10 10 240 20]);
            % Warning Sign
            O.gui.td.kv_warning = uicontrol(O.gui.td.panel,...
                'Style','text',...
                'String','!',...
                'visible','off',...
                'Position',[235 10 10 20]);
            % Input box
            O.gui.td.kv = uicontrol(O.gui.td.panel,...
                'Style','edit',...
                'String',data2str(O.kv),...
                'Background','w',...
                'TooltipString','Enter the shape factor (scalar)',...
                'Callback',@(hObject,eventdata) intervalBoundCallback(hObject,eventdata,'kv',[0 1]),...
                'Position',[250 10 190 20]);
            % Browse button
            O.gui.td.kv_browse = uicontrol(O.gui.td.panel,...
                'Style','pushbutton',...
                'String','Browse',...
                'Value',0,...
                'Callback',@(hObject,eventdata)O.browseVars(hObject,eventdata,'kv',O.gui.td.kv,'double'),...
                'Position',[440 10 50 20]...
                );
            
            drawnow
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % Kinetics
            %
            
            % Panel for kinetics settings
            O.gui.kin.panel = uipanel('Parent',O.gui.fighandle,...
                'Title','Kinetics',...
                'Units','pixels',...
                'Position',[20 20 500 75]);
            
            % Growth rate
            O.gui.kin.growthrate_text = uicontrol(O.gui.kin.panel,...
                'Style','text',...
                'String','Growth rate [?]',...
                'ToolTipString',sprintf('Units must be consistent with those used for\n - Initial Distribution\n - Temperature Profile \n - Antisolvent Profile \n - Nucleation Rate \n - Solution Time'),...
                'Position',[10 35 240 20]);
            % Warning Sign
            O.gui.kin.growthrate_warning = uicontrol(O.gui.kin.panel,...
                'Style','text',...
                'String','!',...
                'visible','off',...
                'Position',[235 35 10 20]);
            % Input box
            O.gui.kin.growthrate = uicontrol(O.gui.kin.panel,...
                'Style','edit',...
                'String',data2str(O.growthrate),...
                'Background','w',...
                'TooltipString','Growth rate as a function of supersaturation (S), temperature (T) and size (y) (an. function)',...
                'Callback',@(hObject,eventdata)set(O,'growthrate',get(hObject,'String')),...
                'Position',[250 35 190 20]);
            % Browse button
            O.gui.kin.growthrate_browse = uicontrol(O.gui.kin.panel,...
                'Style','pushbutton',...
                'String','Browse',...
                'Value',0,...
                'Callback',@(hObject,eventdata)O.browseVars(hObject,eventdata,'growthrate',O.gui.kin.growthrate,{'double','function_handle'}),...
                'Position',[440 35 50 20]...
                );
            
            % Nucleation rate
            O.gui.kin.nucleationrate_text = uicontrol(O.gui.kin.panel,...
                'Style','text',...
                'String','Nucleation rate [?]',...
                'ToolTipString',sprintf('Units must be consistent with those used for\n - Initial Distribution\n - Temperature Profile \n - Antisolvent Profile \n - Growth Rate \n - Solution Time'),...
                'Position',[10 10 240 20]);
            % Input box
            O.gui.kin.nucleationrate = uicontrol(O.gui.kin.panel,...
                'Style','edit',...
                'String',data2str(O.nucleationrate),...
                'Background','w',...
                'TooltipString','Nucleation rate as a function of supersaturation (S), temperature (T) or (moments of) the distribution F, in units of [1/(s m^3)]',...
                'Callback',@(hObject,eventdata)set(O,'nucleationrate',get(hObject,'String')),...
                'Position',[250 10 190 20]);
            % Browse button
            O.gui.kin.nucleationrate_browse = uicontrol(O.gui.kin.panel,...
                'Style','pushbutton',...
                'String','Browse',...
                'Value',0,...
                'Callback',@(hObject,eventdata)O.browseVars(hObject,eventdata,'nucleationrate',O.gui.kin.nucleationrate,{'double','function_handle'}),...
                'Position',[440 10 50 20]...
                );
            
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % Solver
            %
            
            % Panel for solver settings
            O.gui.solv.panel = uipanel('Parent',O.gui.fighandle,...
                'Title','Solver settings',...
                'Units','pixels',...
                'Position',[530 325 500 100]);
            
            % Time
            O.gui.solv.sol_time_text = uicontrol(O.gui.solv.panel,...
                'Style','text',...
                'String','Time [?]',...
                'ToolTipString',sprintf('Units must be consistent with those used for\n - Growth Rate\n - Nucleation Rate \n - Antisolvent Profile\n - Temperature Profile\n'),...
                'Position',[10 60 240 20]);
            O.gui.solv.sol_time_warning = uicontrol(O.gui.solv.panel,...
                'Style','text',...
                'String','!',...
                'visible','off',...
                'Position',[235 60 10 20]);
            % Input box
            O.gui.solv.sol_time = uicontrol(O.gui.solv.panel,...
                'Style','edit',...
                'String','',...
                'TooltipString','Solver time (vector; or scalar)',...
                'Background','w',...
                'Callback',@(hObject,eventdata)set(O,'sol_time',str2num(get(hObject,'String'))),...
                'Position',[250 60 190 20]);
            % Browse button
            O.gui.solv.sol_time_browse = uicontrol(O.gui.solv.panel,...
                'Style','pushbutton',...
                'String','Browse',...
                'Value',0,...
                'Callback',@(hObject,eventdata)O.browseVars(hObject,eventdata,'sol_time',O.gui.solv.sol_time,'double'),...
                'Position',[440 60 50 20]...
                );
            
            % Solution method
            O.gui.solv.sol_method_text = uicontrol(O.gui.solv.panel,...
                'Style','text',...
                'String','Solution method',...
                'Position',[10 35 240 20]);
            % List box for choices
            O.gui.solv.sol_method = uicontrol(O.gui.solv.panel,...
                'Style','popup',...
                'String','Central difference|Moving pivot|Hires',...
                'TooltipString','Choose which method to use',...
                'Callback',@(hObject,eventdata) set(O,'sol_method',O.parenthesis(get(hObject,'String'),get(hObject,'Value'),':')),...
                'Position',[250 35 240 20]);
            
            % Options
            O.gui.solv.sol_options_text = uicontrol(O.gui.solv.panel,...
                'Style','text',...
                'String','Options',...
                'Position',[10 10 240 20]);
            % Input box
            O.gui.solv.sol_options = uicontrol(O.gui.solv.panel,...
                'Style','edit',...
                'String','',...
                'TooltipString','Solver options',...
                'Position',[250 10 190 20]);
            % Browse button
            O.gui.solv.sol_options_browse = uicontrol(O.gui.solv.panel,...
                'Style','pushbutton',...
                'String','Browse',...
                'Value',0,...
                'Callback',@(hObject,eventdata)O.browseVars(hObject,eventdata,'sol_options',O.gui.solv.sol_options,'cell'),...
                'Position',[440 10 50 20]...
                );

            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % Run panel
            %
            
            % Panel for running programs
            O.gui.run.panel = uipanel('Parent',O.gui.fighandle,...
                'Title','Run',...
                'Units','pixels',...
                'Position',[530 20 500 295]);
            
            % Reset button
            O.gui.run.reset = uicontrol(O.gui.run.panel,...
                'Style','pushbutton',...
                'String','Reset Values',...
                'Value',0,...
                'callback',@(hObject,Event) O.clone(O_original),...
                'Position',[20 220 225 30]...
                );
            
            
            % Default button
            O.gui.run.default = uicontrol(O.gui.run.panel,...
                'Style','pushbutton',...
                'String','Default Values',...
                'Value',0,...
                'Callback',@(hObject,Event)O.setDefaults,...
                'Position',[245 220 225 30]...
                );
            
            % Solve button
            O.gui.run.start = uicontrol(O.gui.run.panel,...
                'Style','pushbutton',...
                'String','Solve',...
                'Value',0,...
                'Enable','off',...
                'Callback',@(hObject,Event)O.solve,...
                'Position',[20 180 450 30]...
                );
            
            % Write to file button
            O.gui.run.export = uicontrol(O.gui.run.panel,...
                'Style','pushbutton',...
                'String','Write settings to file',...
                'Value',0,...
                'Enable','on',...
                'Callback',@(hObject,Event) saveCAT(O),...
                'Position',[20 140 450 30]...
                );
            
            % Plot button
            O.gui.run.plot = uicontrol(O.gui.run.panel,...
                'Style','pushbutton',...
                'String','Plot results',...
                'Value',0,...
                'Callback',@(hObject,Event)O.plot,...
                'Position',[20 100 450 30]...
                );
            
            % Callback function for parameters that are constraint to an
            % interval
            function intervalBoundCallback(hObject,~,namestr,xrange)
            
                if str2num(get(hObject,'String'))>max(xrange)
                    warning('CATTube:valueOutOfRange',...
                    'The value you specified is out of range [%3.0f  %3.0f]',min(xrange),max(xrange));
                    set(hObject,'string',max(xrange))
                    set(O,namestr,max(xrange))
                elseif str2num(get(hObject,'String'))<min(xrange)
                    warning('CATTube:valueOutOfRange',...
                    'The value you specified is out of range [%3.0f  %3.0f]',min(xrange),max(xrange));
                    set(hObject,'string',min(xrange))
                    set(O,namestr,min(xrange))
                else
                    set(O,namestr,str2num(get(hObject,'String')))
                end
            end
            
            O.clone(O_original);
            
        end % function
        
        %% Method save
        
        function saveCAT(O)
            
            % dialog box for file name
            CATname = inputdlg('Enter desired file name');
            kitty = O.clone(O);
            
            kitty.save(CATname);
            
        end % function
        
        %% Method clone
        
        function copyCAT = clone(O,Original)
            

            if ~isa(Original,'CAT')
               
                warning('CAT:clone:notaCAT',...
                    'The object you try to clone must be of class CAT');
                
            else
                
                if nargout == 0
                    F = O;
                else
                    F = CAT('hush');
                    
                end
                    
                
                fieldnames = properties(O);
                fieldnames(strcmp(fieldnames,'gui')) = [];
                warning('off','all');
                for i = 1:length(fieldnames)
                   
                    set(F,fieldnames{i},Original.(fieldnames{i}));
                    
                end
                warning('on','all');
                if nargout == 1
                    copyCAT = F;
                else
                    copyCAT = [];
                end
                
            end

        end % function
        
        
        %% Method O.solvableCheck
        
        function validInput = solvableCheck(O,fieldnames)
            
            if ~iscell(fieldnames)
                fieldnames = {fieldnames};
            end
            validInput = zeros(size(fieldnames));
            i = 1;
            while i <= length(fieldnames) && ~any(validInput) 
                fieldname = fieldnames{i};
                if nargin>1
                    [validInput(i),solvableFlag] = O.diagnose(fieldname,O.(fieldname),'solvable');
                else
                    [~,solvableFlag] = O.diagnose([],[],'solvable');
                    validInput(i) = [];
                end

                if solvableFlag && isfield(O.gui,'run')
                    set(O.gui.run.start,'enable','on');
                elseif isfield(O.gui,'run')
                    set(O.gui.run.start,'enable','off');
                end
                i = i+1;
            end
            
            
        end % function
        
    end % methods
    
    methods(Hidden)
       % Onset Methods go here. Their entire point is to update the GUI when changes occur, there is no need to use these functions independent of normal set actions 
       
       %% Method init_dist_onset
        
        function init_dist_onset(O)
            
            % Update the init_dist field
            set(O.gui.init.init_dist,'String',data2str(O.init_dist));
            validInput = O.solvableCheck('init_dist');

            if validInput
                set(O.gui.init.init_dist_warning,'visible','off')
            else
                set(O.gui.init.init_dist_warning,'visible','on')
            end
        end % function
        
        %% Method init_seed_onset
        
        function init_seed_onset(O)
            
            % Update the init_seed field
            set(O.gui.init.init_seed,'String',data2str(O.init_seed));
            validInput = O.solvableCheck('init_seed');

            if validInput
                set(O.gui.init.init_seed_warning,'visible','off')
            else
                set(O.gui.init.init_seed_warning,'visible','on')
            end
        end % function
        
        %% Method init_massmedium_onset
        
        function init_massmedium_onset(O)
            
            % Update the init_massmedium field
            set(O.gui.init.init_massmedium,'String',data2str(O.init_massmedium));
            validInput = O.solvableCheck('init_massmedium');
            
            if validInput
                set(O.gui.init.init_massmedium_warning,'visible','off')
            else
                set(O.gui.init.init_massmedium_warning,'visible','on')
            end
        end % function
        
        %% Method init_conc_onset
        
        function init_conc_onset(O)
            
            % Update the init_conc field
            set(O.gui.init.init_conc,'String',data2str(O.init_conc));
            validInput = O.solvableCheck('init_conc');
            
            if validInput
                set(O.gui.init.init_conc_warning,'visible','off')
            else
                set(O.gui.init.init_conc_warning,'visible','on')
            end;
        end % function
        
        %% Method Tprofile_onset
        
        function Tprofile_onset(O)
            
            % Update the Tprofile field
            if isfield(O.gui,'init')
                set(O.gui.proc.Tprofile,'String',data2str(O.Tprofile));
            end
            validInput = O.solvableCheck({'Tprofile','ASprofile'});
            
            if any(validInput)
                set(O.gui.proc.Tprofile_warning,'visible','off')
                set(O.gui.proc.ASprofile_warning,'visible','off')
            else
                set(O.gui.proc.Tprofile_warning,'visible','on')
                set(O.gui.proc.ASprofile_warning,'visible','on')
            end
        end % function
        
        %% Method ASprofile_onset
        
        function ASprofile_onset(O)
            
            % Update the ASprofile field
            if isfield(O.gui,'init')
                set(O.gui.proc.ASprofile,'String',data2str(O.ASprofile));
            end
            
            validInput = O.solvableCheck({'ASprofile' 'Tprofile'});
            
            if any(validInput)
                set(O.gui.proc.Tprofile_warning,'visible','off')
                set(O.gui.proc.ASprofile_warning,'visible','off')
            else
                set(O.gui.proc.Tprofile_warning,'visible','on')
                set(O.gui.proc.ASprofile_warning,'visible','on')
            end
            
        end % function
        
        %% Method solubility_onset
        
        function solubility_onset(O)
            
            % Update the solubility field
            if isfield(O.gui,'init')
                set(O.gui.td.solubility,'String',data2str(O.solubility));
                    set(O.gui.init.init_conc,'String',data2str(O.init_conc));
            end
            validInput = O.solvableCheck('solubility');
            
            if validInput
                set(O.gui.td.solubility_warning,'visible','off')
            else
                set(O.gui.td.solubility_warning,'visible','on')
            end
        end % function
        
        %% Method rhoc_onset
        
        function rhoc_onset(O)
            
            % Update the rhoc field
            if isfield(O.gui,'init')
                set(O.gui.td.rhoc,'String',data2str(O.rhoc));
            end
            validInput = O.solvableCheck('rhoc');
            
            if validInput
                set(O.gui.td.rhoc_warning,'visible','off')
            else
                set(O.gui.td.rhoc_warning,'visible','on')
            end
        end % function
        
        %% Method kv_onset
        
        function kv_onset(O)
            
            % Update the kv field
            if isfield(O.gui,'init')
                set(O.gui.td.kv,'String',data2str(O.kv));
            end
            validInput = O.solvableCheck('kv');
            
            if validInput
                set(O.gui.td.kv_warning,'visible','off')
            else
                set(O.gui.td.kv_warning,'visible','on')
            end
        end % function
        
        %% Method growthrate_onset
        
        function growthrate_onset(O)
            
            % Update the growthrate field

            set(O.gui.kin.growthrate,'String',data2str(O.growthrate));
            validInput = O.solvableCheck('growthrate');
            
            if validInput
                set(O.gui.kin.growthrate_warning,'visible','off')
            else
                set(O.gui.kin.growthrate_warning,'visible','on')
            end
        end % function
        
        %% Method nucleationrate_onset
        
        function nucleationrate_onset(O)
            
            % Update the nucleationrate field
            set(O.gui.kin.nucleationrate,'String',data2str(O.nucleationrate));
            
            
        end % function
        
        %% Method sol_time_onset
        
        function sol_time_onset(O)
            
            % Update the sol_time field
            set(O.gui.solv.sol_time,'String',data2str(O.sol_time));
            
            validInput = O.solvableCheck('sol_time');
            
            if validInput
                set(O.gui.solv.sol_time_warning,'visible','off')
            else
                set(O.gui.solv.sol_time_warning,'visible','on')
            end
            
        end % function
        
        %% Method sol_method_onset
        
        function sol_method_onset(O)
            
            % Update the sol_method field
            switch O.sol_method
                case 'centraldifference'
                    value = 1;
                case 'movingpivot'
                    value = 2;
                case 'hires'
                    value = 3;
            end % switch
            
            if isfield(O.gui,'init')
                set(O.gui.solv.sol_method,'Value',value);
            end
            
%             O.solvableCheck('sol_method');
            
        end % function
        
        %% Method sol_options_onset
        
        function sol_options_onset(O)
            
            % Update the sol_options field
            if isfield(O.gui,'init')
                set(O.gui.solv.sol_options,'String',data2str(O.sol_options));
            end
            
%             O.solvableCheck('sol_options');
            
        end % function
        
       
    end
    
    methods (Static)
        
        function out = parenthesis(x, varargin) 
            
            out = x(varargin{:});
            
        end % function paren
        
    end % methods Static
end % classdef